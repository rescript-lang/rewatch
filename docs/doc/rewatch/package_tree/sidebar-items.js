window.SIDEBAR_ITEMS = {"fn":[["build_package","Make Package"],["extend_with_children","This takes the tree of packages, and finds all the source files for each, adding them to the respective packages."],["get_source_dirs","Given a projects’ root folder and a `bsconfig::Source`, this recursively creates all the sources in a flat list. In the process, it removes the children, as they are being resolved because of the recursiveness. So you get a flat list of files back, retaining the type_ and wether it needs to recurse into all structures"],["get_source_files","`get_source_files` is essentially a wrapper around `structure_hashmap::read_structure`, which read a list of files in a folder to a hashmap of `string` / `fs::Metadata` (file metadata). Reason for this wrapper is the recursiveness of the `bsconfig.json` subfolders. Some sources in bsconfig can be specified as being fully recursive (`{ subdirs: true }`). This wrapper pulls out that data from the config and pushes it forwards. Another thing is the ‘type_’, some files / folders can be marked with the type ‘dev’. Which means that they may not be around in the distributed NPM package. The file reader allows for this, just warns when this happens. TODO -> Check wether we actually need the `fs::Metadata`"],["make","Make turns a folder, that should contain a bsconfig, into a tree of Packages. It does so in two steps:"]],"struct":[["Package",""]]};